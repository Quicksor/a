#include <stdio.h>

int search(int frames[], int size, int page) {
    for (int i = 0; i < size; i++)
        if (frames[i] == page)
            return i;
    return -1;
}

void FIFO(int pages[], int n, int capacity) {
    int frames[capacity];
    int front = 0, count = 0, faults = 0;

    printf("\nFIFO:\n");
    for (int i = 0; i < n; i++) {
        if (search(frames, count, pages[i]) == -1) {
            if (count < capacity)
                frames[count++] = pages[i];
            else {
                frames[front] = pages[i];
                front = (front + 1) % capacity;
            }
            faults++;
        }
        printf("Step %2d: ", i+1);
        for (int j = 0; j < count; j++) printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults (FIFO): %d\n", faults);
}

void LRU(int pages[], int n, int capacity) {
    int frames[capacity], time[capacity];
    int count = 0, faults = 0;

    printf("\nLRU:\n");
    for (int i = 0; i < n; i++) {
        int pos = search(frames, count, pages[i]);

        if (pos == -1) {
            if (count < capacity) {
                frames[count] = pages[i];
                time[count] = i;
                count++;
            } else {
                int lru = 0;
                for (int j = 1; j < capacity; j++)
                    if (time[j] < time[lru]) lru = j;
                frames[lru] = pages[i];
                time[lru] = i;
            }
            faults++;
        } else {
            time[pos] = i;
        }

        printf("Step %2d: ", i+1);
        for (int j = 0; j < count; j++) printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults (LRU): %d\n", faults);
}

int predict(int pages[], int n, int frames[], int index, int capacity) {
    int farthest = index, res = -1;
    for (int i = 0; i < capacity; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == n) return i;
    }
    return (res == -1) ? 0 : res;
}

void Optimal(int pages[], int n, int capacity) {
    int frames[capacity], count = 0, faults = 0;

    printf("\nOptimal:\n");
    for (int i = 0; i < n; i++) {
        if (search(frames, count, pages[i]) == -1) {
            if (count < capacity) {
                frames[count++] = pages[i];
            } else {
                int idx = predict(pages, n, frames, i + 1, capacity);
                frames[idx] = pages[i];
            }
            faults++;
        }

        printf("Step %2d: ", i+1);
        for (int j = 0; j < count; j++) printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults (Optimal): %d\n", faults);
}

int main() {
    int n, capacity;

    printf("Enter number of frames: ");
    scanf("%d", &capacity);

    printf("Enter number of pages: ");
    scanf("%d", &n);

    int pages[n];
    printf("Enter page reference string:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    FIFO(pages, n, capacity);
    LRU(pages, n, capacity);
    Optimal(pages, n, capacity);

    return 0;
}
